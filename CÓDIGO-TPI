#include <stdio.h>
#define _CRT_RAND_S
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct Respuesta {
    long long Respuesta_Id,Pregunta_Id,Respuesta_Nro;
    char Respuesta[50];
    float Ponderacion; // 0 a 1
    struct Respuesta *sgte;
} Respuesta;

typedef struct Pregunta {
    long long Pregunta_Id,Encuesta_Id;
    char Pregunta[50];
    float Ponderacion; // 0 a 1
    struct Pregunta* sgte;
} Pregunta;

typedef struct Encuesta {
    long long Encuesta_Id,Encuesta_Mes,Encuesta_Anio,Procesada;
    char Denominacion[50];
    struct Encuesta* sgte;
} Encuesta;

typedef struct Marcado {
    long long Pregunta_Id,Respuesta_Id;
    struct Marcado *sgte; // Puntero al siguiente marcado
}Marcado;
Marcado rew,rew2;

typedef struct EncuestaResp {
    long long idEncuestaRespondida, Encuesta_Id,encuestador;
    char fecha[30];
    Marcado* listaPreguntas; // Lista enlazada de respuestas marcadas
    struct EncuestaResp *izq, *der;
}registry;
registry reg2;

//----------------|PUNTEROS FILE|-------------------------
FILE *encuestas_respondidas_CSV,*marcado;

//----------------|PROTOTIPOS|----------------------------
//====|RESPUESTAS|====
void crudRespuestas();
void crearRespuesta(Respuesta **l);
void insertarRespuesta(Respuesta **l, Respuesta *nv, Respuesta *r);
void mostrarRespuestas(Respuesta *l);
void modificarRespuesta(Respuesta *l, int id);
void borrarRespuesta(Respuesta **l, int id, Respuesta *r);

void crearEncuesta(Encuesta ** head);
void borrarEncuesta(Encuesta ** head);
void modificarEncuesta(Encuesta ** head);
void leerEncuesta();
void apilar(Encuesta ** head, Encuesta * node);
void pilavacia();
void desapilar();

//====|PREGUNTAS|====
void Crud_Preguntas(Pregunta **l, Respuesta **respL);
void crearPregunta(Pregunta **l);
Pregunta* insertarPregunta(Pregunta *p, Pregunta *r);
void mostrarPregunta(Pregunta *l);
void modificarPregunta(Pregunta *l, long long id);
void borrarPregunta(Pregunta **l, long long encuestaId, Respuesta **res);

//====|ARBOL|====
void Agregar_Registro_Encuesta_Respondida();
void Leer_CSV_Encuestas_Respondidas(registry **);
registry* insertar_arbol(registry *, registry * );
void mostrar_arbol(registry *r);

//----------------|MAIN|----------------------------
int main() {

	Pregunta *pregL = NULL;
	Respuesta *respL = NULL;
	registry *raiz = NULL;
	int eleccion=-1;
	
	while (eleccion != 0) {
 		printf("====== MENU PRINCIPAL ======\n1. CRUD de Encuestas\n2. CRUD de Preguntas\n3. CRUD de Respuestas\n4. Procesamiento de Encuestas (Archivos)\n5. Leer/Grabar CSV\n6. Menu principal\n0. Salir\nSeleccione una opcion: ");
        scanf("%d", &eleccion);

        switch (eleccion) {
            case 1:
                printf("Has elegido el modulo: CRUD de Encuestas\n");
                break;
            case 2:
                printf("Has elegido el modulo: CRUD de Preguntas\n");
                Crud_Preguntas(&pregL, &respL);
                break;
            case 3:
                printf("Has elegido el modulo: CRUD de Respuestas\n");
                crudRespuestas(&respL);
        	break;
            case 4:
                printf("Has elegido el modulo: Procesamiento de Encuestas (Archivos)\n");
        	break;
            case 5:
		//TEGAN EL ARCHIVO CON LOS DATOS DENTRO DE LA CARPETA
	 	//Agregar_Registro_Encuesta_Respondida();
		puts("========================lectura desde el registro========================");
		Leer_CSV_Encuestas_Respondidas(&raiz);
		
		puts("\n========================lectura desde el arbol========================");
		mostrar_arbol(raiz);
                break;
            case 6:
                printf("Ya estás en el menu principal.\n");
                break;
            case 0:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opcion invalida. Intente de nuevo.\n");
        }
    }
	
	return 0;
}
//===================================|FUNCIONES|===================================

//===================================|ARBOL|===================================
void Agregar_Registro_Encuesta_Respondida(){
	
	if ((encuestas_respondidas_CSV = fopen("Encuestas_RESPONDIDAS.txt", "a+"))!= NULL) {
	    puts("\n---Agregar Registro---\n");
	    
	    printf("Ingrese ID Encuesta (6 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.Encuesta_Id);
	
		reg2.listaPreguntas = (Marcado*) malloc(sizeof(Marcado));
		
	    printf("Ingrese ID Pregunta (8 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.listaPreguntas->Pregunta_Id);
	
	    printf("Ingrese ID Respuesta (12 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.listaPreguntas->Respuesta_Id);		
	    
		printf("Ingrese Fecha (YYYYMMDD): ");
		fflush(stdin);
		scanf("%8s", reg2.fecha);

	    printf("Ingrese ID Encuestador (4 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.encuestador);
	
	    printf("Ingrese ID Encuesta Respondida (12 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.idEncuestaRespondida);
	
		fprintf(encuestas_respondidas_CSV, "%06lld%08lld%012lld%s%04lld%012lld\n", reg2.Encuesta_Id,reg2.listaPreguntas->Pregunta_Id, reg2.listaPreguntas->Respuesta_Id, reg2.fecha, reg2.encuestador, reg2.idEncuestaRespondida);
	
	    fclose(encuestas_respondidas_CSV);
	    puts("Registro agregado correctamente.");
		free(reg2.listaPreguntas);
	}else
		puts("Error.");
}

void Leer_CSV_Encuestas_Respondidas(registry **r){
    char linea[200];
    
    if ((encuestas_respondidas_CSV = fopen("Encuestas_RESPONDIDAS.txt", "r"))!= NULL) {
	    printf("\n---Registros Leidos---\n");
	    
	    while (fgets(linea, sizeof(linea), encuestas_respondidas_CSV)) {
			
			registry *nv = (registry*) malloc(sizeof(registry));
			nv->der=NULL;
			nv->izq=NULL;
			
			nv->listaPreguntas = (Marcado*) malloc(sizeof(Marcado));
	        nv->listaPreguntas->sgte=NULL;
	        
			sscanf(linea,"%6lld%8lld%12lld%8s%4lld%12lld", &nv->Encuesta_Id,&nv->listaPreguntas->Pregunta_Id, &nv->listaPreguntas->Respuesta_Id, nv->fecha, &nv->encuestador, &nv->idEncuestaRespondida);
			
			printf("Encuesta: %06lld | Pregunta: %08lld | Respuesta: %012lld | Fecha: %s | Encuestador: %04lld | ID Resp: %012lld\n", nv->Encuesta_Id,nv->listaPreguntas->Pregunta_Id, nv->listaPreguntas->Respuesta_Id, nv->fecha, nv->encuestador, nv->idEncuestaRespondida);

			*r = insertar_arbol(*r,nv);
	    }
	    fclose(encuestas_respondidas_CSV);
	    
    }else
		puts("Error.");
}

registry* insertar_arbol(registry *r, registry *n) {
    if (r != NULL) {
        if (r->idEncuestaRespondida == n->idEncuestaRespondida) {
            if (r->listaPreguntas == NULL) {
				// Primer nodo en la lista
				r->listaPreguntas= n->listaPreguntas;
			} else {
				//insertar al final
				Marcado* actual = r->listaPreguntas;
				while (actual->sgte != NULL) {
				    actual = actual->sgte;
				}
					actual->sgte = n->listaPreguntas;
			}
			free(n);
        } else
			if (n->idEncuestaRespondida < r->idEncuestaRespondida) {
            r->izq = insertar_arbol(r->izq, n);
        } else {
            r->der = insertar_arbol(r->der, n);
        }
    } else {
        r = n;
        r->izq = r->der = NULL;
    }
    return r;
}

void mostrar_arbol(registry *r) {
	if (r == NULL)
		return;

    // Mostrar subárbol izquierdo
    mostrar_arbol(r->izq);

    // Mostrar datos del nodo actual
    printf("\nEncuesta Respondida ID: %012lld | Encuesta ID: %06lld | Fecha: %s | Encuestador: %04lld\nPreguntas y Respuestas:\n", r->idEncuestaRespondida, r->Encuesta_Id, r->fecha, r->encuestador);

    // Recorrer la lista de preguntas
    Marcado* actual = r->listaPreguntas;
    while (actual != NULL) {
        printf("Pregunta ID: %08lld | Respuesta ID: %012lld\n", 
               actual->Pregunta_Id, actual->Respuesta_Id);
        actual = actual->sgte;
    }

    // Mostrar subárbol derecho
    mostrar_arbol(r->der);
}

//===================================|PREGUNTAS|===================================
void Crud_Preguntas(Pregunta **l, Respuesta **respL){
	int eleccion=-1;
	long long id;
	
	printf("----- Menu de Preguntas ------- \n 1 - Crear  \n 2 - Leer  \n 3 - Modificar \n 4 - Borrar \n 0 - Salir \n Ingrese una opcion: "); 
	fflush(stdin);
    scanf("%d", &eleccion);
	while (eleccion != 0) {
	

        switch (eleccion) {
			case 1:
		        puts("Has elegido el modulo: Crear pregunta");
		        crearPregunta(l);
		    break;

		    case 2:
		        puts("Has elegido el modulo: Leer pregunta");
		        mostrarPregunta(*l);
		    break;
		    
		    case 3:
		        puts("Has elegido el modulo: Modificar pregunta");   
		        printf("Ingrese ID a modificar: ");
                scanf("%lld", &id);
                modificarPregunta(*l, id);
			break;
			
		    case 4:
		        puts("Has elegido el modulo: Borrar pregunta ");
		        printf("Ingrese ID a borrar: ");
                scanf("%lld", &id);
                borrarPregunta(l, id, respL);
		    break;
		    
		    case 0:
		        puts("Saliendo del modulo...");
		    break;
		    
		    default:
		        puts("Opcion invalida. Intente de nuevo.");
        }
        
		printf("----- Menu de Preguntas ------- \n 1 - Crear  \n 2 - Leer  \n 3 - Modificar \n 4 - Borrar \n 0 - Salir \n Ingrese una opcion: ");
	 	fflush(stdin);
 		scanf("%d", &eleccion);
    }
}

void crearPregunta(Pregunta **l){
	Pregunta *p;
	Pregunta *aux;
	long long nuevoid = 1;
	
	p = (Pregunta *) malloc(sizeof(Pregunta));
	if (p == NULL) {
        printf("No hay espacio de memoria.\n");
        return;  
    }
    
    if (*l != NULL) {  
        aux = *l;     
        nuevoid = aux->Pregunta_Id; 


        while (aux != NULL) {
            if (aux->Pregunta_Id > nuevoid) {
                nuevoid = aux->Pregunta_Id;
            }
            aux = aux->sgte;
        }
        p->Pregunta_Id = nuevoid + 1;  
    } else {
        p->Pregunta_Id = 1;  
    }
 	// Pedir datos
    printf("Ingrese ID de la encuesta asociada: ");
    scanf("%lld", &p->Encuesta_Id);
    printf("Ingrese el texto de la pregunta: ");
    fflush(stdin);
    fgets(p->Pregunta, 50, stdin);
    p->Pregunta[strcspn(p->Pregunta, "\n")] = '\0';

    // Validar ponderación
    float sumaPonderacion = 0.0;
    Pregunta *temp = *l;
    while (temp != NULL) {
        sumaPonderacion += temp->Ponderacion;
        temp = temp->sgte;
    }

    printf("Ingrese la ponderación (0.01 a %.2f): ", 1.0 - sumaPonderacion);
    scanf("%f", &p->Ponderacion);
    if (sumaPonderacion + p->Ponderacion > 1.0) {
        printf("Error: La suma de ponderaciones no puede exceder 1.0.\n");
        free(p);
        return;
    }

    // Insertar recursivamente (ordenado por ID)
    *l = insertarPregunta(p, *l);
    printf("Pregunta creada con ID: %lld\n", p->Pregunta_Id);
}


Pregunta* insertarPregunta(Pregunta *p, Pregunta *r) {
    if (r == NULL || p->Pregunta_Id < r->Pregunta_Id) {
        p->sgte = r;
        return p;
    } else {
        r->sgte = insertarPregunta(p, r->sgte);
        return r;
    }
}

void mostrarPregunta(Pregunta *l){
	if (l == NULL) {
        puts("No hay preguntas cargadas.");
        return;
    }
    puts("Lista de preguntas:");
    while (l != NULL) {
        printf("\nID: %lld\nEncuesta ID: %lld\nTexto: %s\nPonderación: %.2f\n", l->Pregunta_Id, l->Encuesta_Id, l->Pregunta, l->Ponderacion);
        l = l->sgte;
    }
}

void modificarPregunta(Pregunta *l, long long id) {
    while (l != NULL && l->Pregunta_Id != id) {
        l = l->sgte;
    }
    if (l == NULL) {
        puts("Pregunta no encontrada.");
        return;
    }

    printf("Ingrese nuevo texto para la pregunta: ");
    fflush(stdin);
    fgets(l->Pregunta, 50, stdin);
    l->Pregunta[strcspn(l->Pregunta, "\n")] = '\0';

    printf("Ingrese nueva ponderación: ");
    float nuevaPond;
    scanf("%f", &nuevaPond);
    if (nuevaPond < 0.0 || nuevaPond > 1.0) {
        puts("Ponderación inválida. Debe estar entre 0 y 1.");
        return;
    }
    l->Ponderacion = nuevaPond;

    puts("Pregunta modificada con éxito.");
}

void borrarPregunta(Pregunta **l, long long encuestaId, Respuesta **res) {
    Pregunta *act = *l, *ant = NULL, *bor;

    while (act != NULL) {
        if (act->Encuesta_Id == encuestaId) {
            // Borrar todas las respuestas de esta pregunta
            Respuesta *r = *res;
            while (r != NULL) {
                if (r->Pregunta_Id == act->Pregunta_Id) {
                    borrarRespuesta(res, r->Respuesta_Id, *res);
                    r = *res; // Reiniciar por si se eliminó el primer nodo
                } else {
                    r = r->sgte;
                }
            }

            // Borrar la pregunta
            bor = act;
            if (ant == NULL) {
                *l = act->sgte;
                act = *l;
            } else {
                ant->sgte = act->sgte;
                act = ant->sgte;
            }
            free(bor);
            puts("Pregunta borrada.");
        } else {
            ant = act;
            act = act->sgte;
        }
    }

    puts("Todas las preguntas de la encuesta fueron borradas.");
}

//===================================|RESPUESTAS|===================================
void crudRespuestas(Respuesta **l){
	int opc, id;//opc para ocpion del crud e id para buscar el de modificar y para buscar el id a borrar]
	
	printf("====== |MENU CRUD RESPUESTAS| ======\n1.Agregar una respuesta\n2.Modificar una respuesta\n3.Borrar una respuesta\n4.Mostrar respuestas\n0.Salir\n|Ingrese una opcion:|\n");
	scanf("%d",&opc);
	while(opc < 0 || opc > 4){
		printf("|Opcion invalida!|\n|Ingrese nuevamente|\n====== |MENU CRUD RESPUESTAS| ======\n1.Agregar una respuesta\n2.Modificar una respuesta\n3.Borrar una respuesta\n4.Mostrar respuestas\n0.Salir\n|Ingrese una opcion:|\n");
		scanf("%d",&opc);
	}
	switch(opc){
		case 0: printf("Quintana\n");break;
		case 1: crearRespuesta(&(*l)); break;
		case 2: printf("Ingrese el id respuesta a modificar:\n");
				scanf("%d",&id);
				modificarRespuesta(*l,id);break;
		case 3: printf("Ingrese el id respuesta a borrar:\n");
				scanf("%d",&id);
				borrarRespuesta(&(*l),id,*l);break;
		case 4: mostrarRespuestas((*l));break;
		default: printf("Opcion invalida, Intente nuevamente!\n");
	}
}

void crearRespuesta(Respuesta **l){
	Respuesta *aux = NULL; //sirve solo para recorrer la lista y buscar el maximo id
	int n = 0; //es el numero de respuesta maximo en una misma pregunta
	Respuesta *p = (Respuesta *) malloc(sizeof(Respuesta));
	if(p == NULL){
		printf("no hay espacio en momoria\n");
		return;
	}
	
	//obtener el mayor id y ponerle +1
	if(*l == NULL){
		p->Respuesta_Id = 1;	
	}else{
		aux = (*l)->sgte;
		while(aux->sgte != *l){
			aux = aux->sgte;
		}
		p->Respuesta_Id = aux->Respuesta_Id + 1;
	}
	
	//cargar id pregunta
	printf("pregunta id:\n");
	scanf("%d",&p->Pregunta_Id);
	
	//obtener el mayor numero de respuesta y ponerle +1
	if(*l == NULL){
		p->Respuesta_Nro = 1;	
	}else{
		aux = (*l)->sgte;
		while(aux->sgte != *l){
			if(aux->Pregunta_Id == p->Pregunta_Id && aux->Respuesta_Nro > n){ // busca el nodo en la misma pregunta pero con un numero de respuesta mayor
				n = aux->Respuesta_Nro;
			}
			aux = aux->sgte;
		}
		p->Respuesta_Nro = aux->Respuesta_Nro + 1;
	}
	
	//cargar los datos restantes, MODIFICAR CUANDO EXISTAN LOS DEMAS CRUDS por si hay limitantes
	printf("ingrese la respuesta (texto):\n");
	fflush(stdin);
	gets(p->Respuesta);
	fflush(stdin);
	printf("Ingrese la ponderacion entre 0 y 1\n");
	scanf("%f",&p->Ponderacion);
	p->sgte = NULL;
	insertarRespuesta(&(*l),p,(*l));
	printf("Se creo una nueva respuesta!\n");
}

void insertarRespuesta(Respuesta **l, Respuesta *nv, Respuesta *r){
	Respuesta *aux;
	if(*l != NULL){
		if(nv->Respuesta_Id < (*l)->Respuesta_Id){
			nv->sgte = *l;
			if(nv->Respuesta_Id < r->Respuesta_Id){
				aux = *l;
				while(aux->sgte != *l){
					aux = aux->sgte;
				}
				aux->sgte = nv;
			}
			*l = nv;
		}
		else{
			if((*l)->sgte == r){
				(*l)->sgte = nv;
				nv->sgte = r;
			}
			else{
				insertarRespuesta(&(*l)->sgte,nv,r);
			}
		}
	}
	else{
		*l = nv;
		(*l)->sgte = *l;
	}
}

void mostrarRespuestas(Respuesta *l){
	Respuesta *r;
	r = l;
	if(l != NULL){
		printf("RESPUESTA ID: %d | PREGUNTA ID: %d | RESPUESTA NRO: %d | RESPUESTA: %s | PONDERACION: %.2f\n",l->Respuesta_Id,l->Pregunta_Id,l->Respuesta_Nro,l->Respuesta,l->Ponderacion);
		l = l->sgte;
	}
	while(l != r){
		printf("RESPUESTA ID: %d | PREGUNTA ID: %d | RESPUESTA NRO: %d | RESPUESTA: %s | PONDERACION: %.2f\n",l->Respuesta_Id,l->Pregunta_Id,l->Respuesta_Nro,l->Respuesta,l->Ponderacion);
		l = l->sgte;
	}
}

void modificarRespuesta(Respuesta *l, int id){
	Respuesta *r; // "r" representa en todos los casos donde comienza y termina la lista para no tener entrar en bucle infinito
	if(l != NULL){
		r = l;
		//comparar en el primer nodo
		if(l->Respuesta_Id == id){
			printf(" |Encontrado!|\n-Pregunta id (antes: '%d'):\n",l->Pregunta_Id);
			scanf("%d",&l->Pregunta_Id);
			printf("Respuesta (antes: '%s'):\n",l->Respuesta);
			fflush(stdin);
			gets(l->Respuesta);
			fflush(stdin);
			printf("Ponderacion del 0 al 1 (antes: '%.2f'):\n",l->Ponderacion);
			scanf("%f",&l->Ponderacion);
			printf("|Datos modificados!|\n");
			return;
		}
		
		//comparar con el resto
		l = l->sgte;
		while(l != r){
			//se encontro y se modifican los datos del nodo menos el de "Respuesta ID"
			if(l->Respuesta_Id == id){
				printf(" |Encontrado!|\n-Pregunta id (antes: '%d'):\n",l->Pregunta_Id);
				scanf("%d",&l->Pregunta_Id);
				printf("Respuesta (antes: '%s'):\n",l->Respuesta);
				fflush(stdin);
				gets(l->Respuesta);
				fflush(stdin);
				printf("Ponderacion del 0 al 1 (antes: '%.2f'):\n",l->Ponderacion);
				scanf("%f",&l->Ponderacion);
				printf("|Datos modificados!|\n");
			}
			l = l->sgte;
		}
	}
}

void borrarRespuesta(Respuesta **l, int id, Respuesta *r){
	Respuesta *bor, *ult;
	if(*l != NULL){
		printf("%d\n",(*l)->sgte->Respuesta_Id);
		if((*l)->Respuesta_Id == id){
			if(*l == r){
				ult = *l;
				while(ult->sgte != r){
					ult = ult->sgte;
				}
				ult->sgte = (*l)->sgte;
			}
			bor = *l;
			*l = (*l)->sgte;
			if(*l == bor){
				*l = NULL;
				printf("nodo unico\n");
			}
			free(bor);
			printf("|se borro la respuesta|\n");
		}else{
			if((*l)->sgte == r){
				printf("Fin de la lista, no se encontro al nodo\n");
			}else{
				borrarRespuesta(&(*l)->sgte,id,r);
			}
		}
	}
}

void crearEncuesta(Encuesta ** head){

time_t currentTime = time(NULL);
struct tm *monthYear = localtime(&currentTime); 
long long randomNumber;
Encuesta * newNode = malloc(sizeof(Encuesta));
rand_s(&randomNumber);

printf("Ingresar nombre de la encuesta");
fgets(newNode->Denominacion, 1, stdin);
newNode->Encuesta_Anio = monthYear->tm_year + 1900;
newNode->Encuesta_Mes = monthYear->tm_mon + 1;
newNode->Procesada = 0;
newNode->sgte = NULL;
newNode->Encuesta_Id = randomNumber;
apilar(newNode, head);

}
