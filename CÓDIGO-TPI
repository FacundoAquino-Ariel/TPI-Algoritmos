#include <stdio.h>
#define _CRT_RAND_S
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct Respuesta {
    long long Respuesta_Id,Pregunta_Id,Respuesta_Nro;
    char Respuesta[50];
    float Ponderacion; // 0 a 1
    struct Respuesta *sgte;
} Respuesta;

typedef struct Pregunta {
    long long Pregunta_Id,Encuesta_Id;
    char Pregunta[50];
    float Ponderacion; // 0 a 1
    struct Pregunta* sgte;
} Pregunta;

typedef struct Encuesta {
    long long Encuesta_Id,Encuesta_Mes,Encuesta_Anio,Procesada;
    char Denominacion[50];
    struct Encuesta* sgte;
} Encuesta;

typedef struct Marcado {
    long long Pregunta_Id,Respuesta_Id;
    struct Marcado *sgte; // Puntero al siguiente marcado
}Marcado;
Marcado rew,rew2;

typedef struct EncuestaResp {
    long long idEncuestaRespondida, Encuesta_Id,encuestador;
    char fecha[30];
    Marcado* listaPreguntas; // Lista enlazada de respuestas marcadas
    struct EncuestaResp *izq, *der;
}registry;
registry reg2;

//----------------|PUNTEROS FILE|-------------------------
FILE *encuestas_respondidas_CSV,*marcado;

//----------------|PROTOTIPOS|----------------------------
//====|ENCUESTAS|QUINTANA|====
void menuEncuestas(Encuesta **head, Pregunta **headPr, Respuesta **headRe);
void crearEncuesta(Encuesta **head);
void apilar(Encuesta * node, Encuesta **head);
void borrarEncuesta(Encuesta **head, long long id, FILE *listaModificada, Pregunta **headPr, Respuesta **headRe);
void modificarEncuesta(Encuesta **head, long long id, FILE *listaModificada);
void ListaDeEncuestas(Encuesta **head);
int pilavacia(Encuesta *head);
Encuesta * desapilar(Encuesta **head);
void leerCSVencuestas(Encuesta **head);

//====|PREGUNTAS|TARNOWSKI|====
void Crud_Preguntas(Pregunta **l, Respuesta **respL);
void cargarPreguntasDesdeCSV(Pregunta **head);
void crearPregunta(Pregunta **l);
Pregunta* insertarPregunta(Pregunta *p, Pregunta *r);
void mostrarPregunta(Pregunta *l);
void modificarPregunta(Pregunta *l, long long id);
void borrarPregunta(Pregunta **l, long long encuestaId, Respuesta **res);

//====|RESPUESTAS|SANCHEZ|====
void crudRespuestas(Pregunta *pl, Respuesta **l);
void crearRespuesta(Respuesta **l, Pregunta *pl, int uno, int idPreg);
void insertarRespuesta(Respuesta **l, Respuesta *nv, Respuesta *r);
void mostrarRespuestas(Respuesta *l);
void modificarRespuesta(Respuesta *l, int id);
void preBorrar(Respuesta **l, int id, Respuesta *r, Pregunta *pl);
void borrarRespuesta(Respuesta **l, int id, Respuesta *r);
void leerRespuestasCSV(const char* nombreArchivo, Respuesta **inicio);

//====|ARBOL|AQUINO|====
void Agregar_Registro_Encuesta_Respondida();
registry* insertar_arbol(registry *, registry * );
void mostrar_arbol(registry *);
void Leer_CSV_Encuestas_Respondidas(registry **);

//----------------|MAIN|----------------------------
int main() {
	int eleccion=-1;
	char auxiliar[50];
	Pregunta *pregL = NULL;
	Respuesta *respL = NULL;
	registry *raiz = NULL;
	Encuesta *head = NULL;
	
	leerCSVencuestas(&head); 
	leerRespuestasCSV("respuestas.csv",&respL);
 	cargarPreguntasDesdeCSV(&pregL);
	
	while (eleccion != 0) {
 		printf("====== MENU PRINCIPAL ======\n1. CRUD de Encuestas\n2. CRUD de Preguntas\n3. CRUD de Respuestas\n4. Procesamiento de Encuestas (Archivos)\n5. Mostrar datos del archivo.csv de encuestas respondidas\n0. Salir\nSeleccione una opcion: ");
	fflush(stdin);
       fgets(auxiliar, sizeof(auxiliar), stdin);
		eleccion = atoi(auxiliar);

        switch (eleccion) {
            case 1:
                printf("Has elegido el modulo: CRUD de Encuestas\n");
				menuEncuestas(&head, &pregL, &respL);
                break;
            case 2:
                printf("Has elegido el modulo: CRUD de Preguntas\n");
                Crud_Preguntas(&pregL, &respL);
                break;
            case 3:
                printf("Has elegido el modulo: CRUD de Respuestas\n");
                crudRespuestas(pregL, &respL);
        	break;
            case 4:
                printf("Has elegido el modulo: Mostrar datos del archivo.csv de encuestas respondidas\n");
        	break;
            case 5:
				//TEGAN EL ARCHIVO CON LOS DATOS DENTRO DE LA CARPETA
				printf("agregar un nuevo registro? 1=si 2=no: ");
				fflush(stdin);
				scanf("%d",&eleccion);
				if(eleccion==1)
					Agregar_Registro_Encuesta_Respondida();
				
				puts("========================Asi se ven los datos dentro del CSV========================");
				Leer_CSV_Encuestas_Respondidas(&raiz);
				
				puts("\n========================Asi se ven los datos dentro del ARBOL========================");
				mostrar_arbol(raiz);
                break;
            case 0:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opcion invalida. Intente de nuevo.\n");
        }
    }
	
	return 0;
}
//===================================|FUNCIONES|===================================

//===================================|ARBOL|===================================
void Agregar_Registro_Encuesta_Respondida(){
	
	if ((encuestas_respondidas_CSV = fopen("Encuestas_RESPONDIDAS.txt", "a+"))!= NULL) {
	    puts("\n---Agregar Registro---\n");
	    
	    printf("Ingrese ID Encuesta (6 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.Encuesta_Id);
	
		reg2.listaPreguntas = (Marcado*) malloc(sizeof(Marcado));
		
	    printf("Ingrese ID Pregunta (8 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.listaPreguntas->Pregunta_Id);
	
	    printf("Ingrese ID Respuesta (12 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.listaPreguntas->Respuesta_Id);		
	    
		printf("Ingrese Fecha (YYYYMMDD): ");
		fflush(stdin);
		scanf("%8s", reg2.fecha);

	    printf("Ingrese ID Encuestador (4 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.encuestador);
	
	    printf("Ingrese ID Encuesta Respondida (12 digitos): ");
	    fflush(stdin);
		scanf("%lld", &reg2.idEncuestaRespondida);
	
		fprintf(encuestas_respondidas_CSV, "%06lld%08lld%012lld%s%04lld%012lld\n", reg2.Encuesta_Id,reg2.listaPreguntas->Pregunta_Id, reg2.listaPreguntas->Respuesta_Id, reg2.fecha, reg2.encuestador, reg2.idEncuestaRespondida);
	
	    fclose(encuestas_respondidas_CSV);
	    puts("Registro agregado correctamente.");
		free(reg2.listaPreguntas);
	}else
		puts("Error.");
}

void Leer_CSV_Encuestas_Respondidas(registry **r){
    char linea[200];
    
    if ((encuestas_respondidas_CSV = fopen("Encuestas_RESPONDIDAS.txt", "r"))!= NULL) {
	    printf("\n---Registros Leidos---\n");
	    
	    while (fgets(linea, sizeof(linea), encuestas_respondidas_CSV)) {
			
			registry *nv = (registry*) malloc(sizeof(registry));
			nv->der=NULL;
			nv->izq=NULL;
			
			nv->listaPreguntas = (Marcado*) malloc(sizeof(Marcado));
	        nv->listaPreguntas->sgte=NULL;
	        
			sscanf(linea,"%6lld%8lld%12lld%8s%4lld%12lld", &nv->Encuesta_Id,&nv->listaPreguntas->Pregunta_Id, &nv->listaPreguntas->Respuesta_Id, nv->fecha, &nv->encuestador, &nv->idEncuestaRespondida);
			
			printf("Encuesta: %06lld | Pregunta: %08lld | Respuesta: %012lld | Fecha: %s | Encuestador: %04lld | ID Resp: %012lld\n", nv->Encuesta_Id,nv->listaPreguntas->Pregunta_Id, nv->listaPreguntas->Respuesta_Id, nv->fecha, nv->encuestador, nv->idEncuestaRespondida);

			*r = insertar_arbol(*r,nv);
	    }
	    fclose(encuestas_respondidas_CSV);
	    
    }else
		puts("Error.");
}

registry* insertar_arbol(registry *r, registry *n) {
    if (r != NULL) {
        if (r->idEncuestaRespondida == n->idEncuestaRespondida) {
            if (r->listaPreguntas == NULL) {
				// Primer nodo en la lista
				r->listaPreguntas= n->listaPreguntas;
			} else {
				//insertar al final
				Marcado* actual = r->listaPreguntas;
				while (actual->sgte != NULL) {
				    actual = actual->sgte;
				}
					actual->sgte = n->listaPreguntas;
			}
			free(n);
        } else
			if (n->idEncuestaRespondida < r->idEncuestaRespondida) {
            r->izq = insertar_arbol(r->izq, n);
        } else {
            r->der = insertar_arbol(r->der, n);
        }
    } else {
        r = n;
        r->izq = r->der = NULL;
    }
    return r;
}

void mostrar_arbol(registry *r) {
	if (r == NULL)
		return;

    // Mostrar subárbol izquierdo
    mostrar_arbol(r->izq);

    // Mostrar datos del nodo actual
    printf("\nEncuesta Respondida ID: %012lld | Encuesta ID: %06lld | Fecha: %s | Encuestador: %04lld\nPreguntas y Respuestas:\n", r->idEncuestaRespondida, r->Encuesta_Id, r->fecha, r->encuestador);

    // Recorrer la lista de preguntas
    Marcado* actual = r->listaPreguntas;
    while (actual != NULL) {
        printf("Pregunta ID: %08lld | Respuesta ID: %012lld\n", 
               actual->Pregunta_Id, actual->Respuesta_Id);
        actual = actual->sgte;
    }

    // Mostrar subárbol derecho
    mostrar_arbol(r->der);
}

//===================================|PREGUNTAS|===================================
void Crud_Preguntas(Pregunta **l, Respuesta **respL){
	int eleccion=-1;
	long long id;
	

    // Mostrar preguntas para verificar
    Pregunta *aux = *l;

	
	printf("----- Menu de Preguntas ------- \n 1 - Crear  \n 2 - Leer  \n 3 - Modificar \n 4 - Borrar \n 0 - Salir \n Ingrese una opcion: "); 
	fflush(stdin);
    scanf("%d", &eleccion);
	while (eleccion != 0) {
	

        switch (eleccion) {
			case 1:
		        puts("Has elegido el modulo: Crear pregunta");
		        crearPregunta(l);
		    break;

		    case 2:
		        puts("Has elegido el modulo: Leer pregunta");
		        mostrarPregunta(*l);
		    break;
		    
		    case 3:
		        puts("Has elegido el modulo: Modificar pregunta");   
		        printf("Ingrese ID de pregunta a modificar: ");
                scanf("%lld", &id);
                modificarPregunta(*l, id);
			break;
			
		    case 4:
		        puts("Has elegido el modulo: Borrar pregunta ");
		        printf("Ingrese ID de encuesta de preguntas a borrar: ");
                scanf("%lld", &id);
                borrarPregunta(l, id, respL);
		    break;
		    
		    case 0:
		        puts("Saliendo del modulo...");
		    break;
		    
		    default:
		        puts("Opcion invalida. Intente de nuevo.");
        }
        
		printf("----- Menu de Preguntas ------- \n 1 - Crear  \n 2 - Leer  \n 3 - Modificar \n 4 - Borrar \n 0 - Salir \n Ingrese una opcion: ");
	 	fflush(stdin);
 		scanf("%d", &eleccion);
    }
}

void cargarPreguntasDesdeCSV(Pregunta **head) {
    FILE *archivo = fopen("preguntas.csv", "r");
    if (archivo == NULL) {
        printf("Error al abrir preguntas.csv\n");
        return;
    }

    char linea[256];
    int contador = 0;

    while (fgets(linea, sizeof(linea), archivo) != NULL) {
        contador++;
        linea[strcspn(linea, "\r\n")] = '\0';  // Eliminar retorno de carro y salto de línea

        Pregunta *nueva = malloc(sizeof(Pregunta));
        if (nueva == NULL) {
            printf("Error de memoria\n");
            fclose(archivo);
            return;
        }

        // Extraer IDs
        char idPreguntaStr[9] = {0};
        char idEncuestaStr[7] = {0};
        strncpy(idPreguntaStr, linea, 8);
        strncpy(idEncuestaStr, linea + 8, 6);
        nueva->Pregunta_Id = atoll(idPreguntaStr);
        nueva->Encuesta_Id = atoll(idEncuestaStr);

	      for (int i = strlen(linea) - 1; i >= 0; i--) {
		    if ((linea[i] >= '0' && linea[i] <= '9') || linea[i] == ',' || linea[i] == '.') {
		        int j = i;
		        while (j >= 0 && ((linea[j] >= '0' && linea[j] <= '9') || linea[j] == ',' || linea[j] == '.')) {
		            j--;
		        }
		
		        char ponderacionStr[16] = {0};
		        strncpy(ponderacionStr, linea + j + 1, i - j);
		
		        // Reemplazar coma por punto
		        for (int k = 0; ponderacionStr[k] != '\0'; k++) {
		            if (ponderacionStr[k] == ',') {
		                ponderacionStr[k] = '.';
		            }
		        }
		
		        nueva->Ponderacion = atof(ponderacionStr);

		        break;
		    }
		}

        // Extraer texto
        int len = strlen(linea); 
        int textoLen = len - 8 - 6 - 4;
        if (textoLen > 0) {
            strncpy(nueva->Pregunta, linea + 14, textoLen);
            nueva->Pregunta[textoLen] = '\0';
        } else {
            strcpy(nueva->Pregunta, "");
            printf("No se pudo extraer texto\n");
        }

        // Insertar en lista
        nueva->sgte = NULL;
        if (*head == NULL) {
            *head = nueva;
        } else {
            Pregunta *actual = *head;
            while (actual->sgte != NULL) {
                actual = actual->sgte;
            }
            actual->sgte = nueva;
        }

    }

    fclose(archivo);
    printf("Preguntas cargadas desde preguntas.csv correctamente.\n");
}

void crearPregunta(Pregunta **l){
    Pregunta *p;
    Pregunta *aux;
    long long nuevoid = 1;

    p = (Pregunta *) malloc(sizeof(Pregunta));
    if (p == NULL) {
        printf("No hay espacio de memoria.\n");
        return;  
    }
    
    // Obtener nuevo ID
    if (*l != NULL) {
        aux = *l;     
        nuevoid = aux->Pregunta_Id;
        while (aux != NULL) {
            if (aux->Pregunta_Id > nuevoid)
                nuevoid = aux->Pregunta_Id;
            aux = aux->sgte;
        }
        p->Pregunta_Id = nuevoid + 1;
    } else {
        p->Pregunta_Id = 1;
    }

    // Pedir datos
    printf("Ingrese ID de la encuesta asociada: ");
    scanf("%lld", &p->Encuesta_Id);
    
    fflush(stdin);
    printf("Ingrese el texto de la pregunta: ");
    fgets(p->Pregunta, 50, stdin);
    p->Pregunta[strcspn(p->Pregunta, "\n")] = '\0';

    // Calcular suma de ponderaciones existentes para esta encuesta
    float sumaPonderacion = 0.0;
    Pregunta *temp = *l;
    while (temp != NULL) {
        if (temp->Encuesta_Id == p->Encuesta_Id)
            sumaPonderacion += temp->Ponderacion;
        temp = temp->sgte;
    }

    if (sumaPonderacion >= 1.0) {
        printf("No se puede agregar más preguntas a esta encuesta. Ponderación total alcanzada.\n");
        free(p);
        return;
    }

    printf("Ingrese la ponderación (0.01 a %.2f): ", 1.0 - sumaPonderacion);
    scanf("%f", &p->Ponderacion);

    if (p->Ponderacion <= 0.0 || sumaPonderacion + p->Ponderacion > 1.0) {
        printf("Error: La suma de ponderaciones no puede exceder 1.0.\n");
        free(p);
        return;
    }

    // Insertar recursivamente (ordenado por ID)
    *l = insertarPregunta(p, *l);
    printf("Pregunta creada con ID: %lld\n", p->Pregunta_Id);
}


Pregunta* insertarPregunta(Pregunta *p, Pregunta *r) {
    if (r == NULL || p->Pregunta_Id < r->Pregunta_Id) {
        p->sgte = r;
        return p;
    } else {
        r->sgte = insertarPregunta(p, r->sgte);
        return r;
    }
}

void mostrarPregunta(Pregunta *l){
	if (l == NULL) {
        puts("No hay preguntas cargadas.");
        return;
    }
    puts("Lista de preguntas:");
    while (l != NULL) {
        printf("\nID: %lld\nEncuesta ID: %lld\nTexto: %s\nPonderacion: %.2f\n", l->Pregunta_Id, l->Encuesta_Id, l->Pregunta, l->Ponderacion);
        l = l->sgte;
    }
}

void modificarPregunta(Pregunta *l, long long id) {
    Pregunta *actual = l;
    
    while (actual != NULL && actual->Pregunta_Id != id)
        actual = actual->sgte;

    if (actual == NULL) {
        puts("Pregunta no encontrada.");
        return;
    }

    fflush(stdin);
    printf("Ingrese nuevo texto para la pregunta: ");
    fgets(actual->Pregunta, 50, stdin);
    actual->Pregunta[strcspn(actual->Pregunta, "\n")] = '\0';

    printf("Ingrese nueva ponderación: ");
    float nuevaPond;
    scanf("%f", &nuevaPond);

    if (nuevaPond <= 0.0 || nuevaPond > 1.0) {
        puts("Ponderación inválida. Debe estar entre 0.01 y 1.0");
        return;
    }

    // Calcular suma de ponderaciones actuales (excepto la pregunta actual)
    float suma = 0.0;
    Pregunta *aux = l;
    while (aux != NULL) {
        if (aux != actual && aux->Encuesta_Id == actual->Encuesta_Id)
            suma += aux->Ponderacion;
        aux = aux->sgte;
    }

    if (suma + nuevaPond > 1.0) {
        puts("Error: La suma total de ponderaciones excede 1.0");
        return;
    }

    actual->Ponderacion = nuevaPond;
    puts("Pregunta modificada con éxito.");
}

void borrarPregunta(Pregunta **l, long long encuestaId, Respuesta **res) {
    Pregunta *act = *l, *ant = NULL, *bor;

    while (act != NULL) {
        if (act->Encuesta_Id == encuestaId) {


            // Borrar todas las respuestas asociadas a esta pregunta (lista circular)
            if (*res != NULL) {
                Respuesta *r = *res;
                Respuesta *inicio = r;
                int primeraVuelta = 1;

                do {
                    Respuesta *siguiente = r->sgte;

                    if (r->Pregunta_Id == act->Pregunta_Id) {

                        borrarRespuesta(res, r->Respuesta_Id, inicio);
                        if (*res == NULL) {
                            break; // Se vació la lista, salir
                        }
                        inicio = *res; // Actualizar inicio por si cambió
                    }

                    r = siguiente;
                    primeraVuelta = 0;
                } while (r != inicio || primeraVuelta);
            }

            // Borrar la pregunta actual
            bor = act;
            if (ant == NULL) {
                *l = act->sgte;
                act = *l;
            } else {
                ant->sgte = act->sgte;
                act = ant->sgte;
            }

            free(bor);
            puts("Pregunta borrada.");
        } else {
            ant = act;
            act = act->sgte;
        }
    }

    puts("Todas las preguntas de la encuesta fueron borradas.");
}

//===================================|RESPUESTAS|===================================
void crudRespuestas(Pregunta *pl, Respuesta **l){
	int opc, id;//opc para ocpion del crud e id para buscar el de modificar y para buscar el id a borrar]
	
	printf("====== |MENU CRUD RESPUESTAS| ======\n1.Agregar una respuesta\n2.Modificar una respuesta\n3.Borrar una respuesta\n4.Mostrar respuestas\n0.Salir\n|Ingrese una opcion:|\n");
	fflush(stdin);
	scanf("%d",&opc);
	while(opc < 0 || opc > 5){
		printf("|Opcion invalida!|\n|Ingrese nuevamente|\n====== |MENU CRUD RESPUESTAS| ======\n1.Agregar una respuesta\n2.Modificar una respuesta\n3.Borrar una respuesta\n4.Mostrar respuestas\n0.Salir\n|Ingrese una opcion:|\n");
		fflush(stdin);
		scanf("%d",&opc);
	}
	switch(opc){
		case 0: printf("Quintana\n");break;
		case 1: crearRespuesta(&(*l),pl,0,0); break;
		case 2: printf("Ingrese el id respuesta a modificar:\n");
				fflush(stdin);
				scanf("%d",&id);
				modificarRespuesta(*l,id);break;
		case 3: printf("Ingrese el id respuesta a borrar:\n");
				fflush(stdin);
				scanf("%d",&id);
				preBorrar(&(*l),id,*l,pl);break;
		case 4: mostrarRespuestas((*l));break;
		default: printf("Opcion invalida, Intente nuevamente!\n");
	}
}

void crearRespuesta(Respuesta **l, Pregunta *pl, int uno, int idPreg){ //el parametro "uno" sirve para determinar si la ponderacion de la respuesta es "1" u otro valor, 1=1|0=x
	Respuesta *aux = NULL; //sirve solo para recorrer la lista y buscar el maximo id
	int n = 0; //es el numero de respuesta maximo en una misma pregunta
	int primero = 1; //es un booleano que indentifica que esta va a ser la primer respuesta en agragar a una pregunta. Se asume que este es el primero
	int preg = 0; //es otro booleano que identifica si existe la el "id pregunta" o no. 0=no|1=si
	
	Respuesta *p = (Respuesta *) malloc(sizeof(Respuesta));
	if(p == NULL){
		printf("no hay espacio en momoria\n");
		return;
	}
	
	//obtener el mayor id y ponerle +1
	if(*l == NULL){
		p->Respuesta_Id = 1;	
	}else{
		aux = (*l)->sgte;
		while(aux->sgte != *l){
			aux = aux->sgte;
		}
		p->Respuesta_Id = aux->Respuesta_Id + 1;
	}
	
	//cargar id pregunta
	//si idPreg es 0, entonces el idPregunta puede ser cualquier numero
	if(idPreg == 0){
		fflush(stdin);
		printf("pregunta id:\n");
		scanf("%lld",&p->Pregunta_Id);
		while(pl != NULL){
			if(pl->Pregunta_Id == p->Pregunta_Id){
				preg = 1;
			}
			pl = pl->sgte;
		}
	}else{//si idPreg es distinto de 0, entonces el idPregunta va a ser idPreg
		p->Pregunta_Id = idPreg;
	}
	if(preg == 0){
		printf("no existe el id pregunta, no se puede continuar\n");
		return;
	}
	//obtener el mayor numero de respuesta y ponerle +1
	if(*l == NULL){
		p->Respuesta_Nro = 1;	
	}else{
		aux = (*l);
		printf("n1 = %d\n",n);
		if(aux->Pregunta_Id == p->Pregunta_Id && aux->Respuesta_Nro > n){ // busca el nodo en la misma pregunta pero con un numero de respuesta mayor
			printf("aca hay uno %lld | p: %lld\n",aux->Respuesta_Id,aux->Pregunta_Id);
			n = aux->Respuesta_Nro;
		}
		aux = aux->sgte;
		printf("n2 = %d\n",n);
		while(aux != *l){
			if(aux->Pregunta_Id == p->Pregunta_Id && aux->Respuesta_Nro > n){ // busca el nodo en la misma pregunta pero con un numero de respuesta mayor
				printf("aca hay uno %lld | p: %lld\n",aux->Respuesta_Id,aux->Pregunta_Id);
				n = aux->Respuesta_Nro;
			}
			aux = aux->sgte;
			printf("n = %d\n",n);
		}
		p->Respuesta_Nro = n + 1;
	}
	
	//cargar la ponderacion
	if(uno == 1){
		printf("Se determino anteriormente que la ponderacion de esta respuesta va a ser 1\n");
		p->Ponderacion = 1;
	}else{
		if(*l == NULL){
			printf("la lista esta vacia, la ponderacion va a ser 1. Ingrese la pregunta que corresponda con esta\n");	
			p->Ponderacion = 1;
		}else{
			aux = (*l);
			if(aux->Pregunta_Id == p->Pregunta_Id){
				primero = 0;
			}
				aux = aux->sgte;
			while(aux != *l){
				if(aux->Pregunta_Id == p->Pregunta_Id){
					primero = 0;
				}
				aux = aux->sgte;
			}
			if(primero == 1){
				printf("No existe ninguna respuesta vinculada al 'id pregunta' anterior. La poneracion sera '1' por lo que el texto de la respuesta debera corresponder a esta ponderacion\n");
				p->Ponderacion = 1;
			}else{
				fflush(stdin);
				printf("Ingrese la ponderacion entre 0 y 1 (no 1)\n");
				scanf("%f",&p->Ponderacion);
				while(p->Ponderacion < 0 || p->Ponderacion >= 1){
					if(p->Ponderacion == 1){
						printf("Ya existe un ponderacion 1, pureba otra ponderacion\n");
						printf("Ingrese la ponderacion entre 0 y 1 (no 1)\n");
						fflush(stdin);
						scanf("%f",&p->Ponderacion);
					}else{
						printf("No se puede tener una ponderacion menor a 0 o mayor o igual a 1. Ingreselo nuevamente\n");
						fflush(stdin);
						scanf("%f",&p->Ponderacion);
					}
				}
			}
		}
	}
	
	//cargar el texto de la respuesta
	fflush(stdin);
	printf("ingrese la respuesta (texto):\n");
	gets(p->Respuesta);
	
	p->sgte = NULL;
	insertarRespuesta(&(*l),p,(*l));
	printf("Se creo una nueva respuesta!\n");
}

void insertarRespuesta(Respuesta **l, Respuesta *nv, Respuesta *r){
	Respuesta *aux;
	if(*l != NULL){
		if(nv->Respuesta_Id < (*l)->Respuesta_Id){
			nv->sgte = *l;
			if(nv->Respuesta_Id < r->Respuesta_Id){
				aux = *l;
				while(aux->sgte != *l){
					aux = aux->sgte;
				}
				aux->sgte = nv;
			}
			*l = nv;
		}
		else{
			if((*l)->sgte == r){
				(*l)->sgte = nv;
				nv->sgte = r;
			}
			else{
				insertarRespuesta(&(*l)->sgte,nv,r);
			}
		}
	}
	else{
		*l = nv;
		(*l)->sgte = *l;
	}
}

void mostrarRespuestas(Respuesta *l){
	Respuesta *r;
	r = l;
	if(l != NULL){
		printf("RESPUESTA ID: %lld | PREGUNTA ID: %lld | RESPUESTA NRO: %d | RESPUESTA: %s | PONDERACION: %.2f\n",l->Respuesta_Id,l->Pregunta_Id,l->Respuesta_Nro,l->Respuesta,l->Ponderacion);
		l = l->sgte;
		while(l != r){
			printf("RESPUESTA ID: %lld | PREGUNTA ID: %lld | RESPUESTA NRO: %d | RESPUESTA: %s | PONDERACION: %.2f\n",l->Respuesta_Id,l->Pregunta_Id,l->Respuesta_Nro,l->Respuesta,l->Ponderacion);
			l = l->sgte;
		}
	}else{
		printf("La lista esta vacia\n");
	}
}

void modificarRespuesta(Respuesta *l, int id){
	Respuesta *r; // "r" representa en todos los casos donde comienza y termina la lista para no tener entrar en bucle infinito
	int encontrado = 0; //Es una bandera que indica si se encontro al nodo o no
	if(l != NULL){
		r = l;
		//comparar en el primer nodo
		if(l->Respuesta_Id == id){
			encontrado = 1;
			printf(" |Encontrado!|\n-Pregunta id (antes: '%d'):\n",l->Pregunta_Id);
			fflush(stdin);
			scanf("%lld",&l->Pregunta_Id);
			printf("Respuesta (antes: '%s'):\n",l->Respuesta);
			fflush(stdin);
			gets(l->Respuesta);
			fflush(stdin);
			if(l->Ponderacion == 1){
				printf("La ponderacion es 1, este dato no puede ser modificado. De querer hacerlo debera borrarlo y crear otro nodo o modificar el texto de la respuesta\n");
			}else{
				printf("Ponderacion del 0 al 1 (antes: '%.2f'):\n",l->Ponderacion);
				fflush(stdin);
				scanf("%f",&l->Ponderacion);
			}
			printf("|Datos modificados!|\n");
			return;
		}
		
		//comparar con el resto
		l = l->sgte;
		while(l != r){
			//se encontro y se modifican los datos del nodo menos el de "Respuesta ID"
			if(l->Respuesta_Id == id){
				encontrado = 1;
				printf(" |Encontrado!|\n-Pregunta id (antes: '%d'):\n",l->Pregunta_Id);
				fflush(stdin);
				scanf("%lld",&l->Pregunta_Id);
				printf("Respuesta (antes: '%s'):\n",l->Respuesta);
				fflush(stdin);
				gets(l->Respuesta);
				fflush(stdin);
				if(l->Ponderacion == 1){
					printf("La ponderacion es 1, este dato no puede ser modificado. De querer hacerlo debera borrarlo y crear otro nodo o modificar el texto de la respuesta\n");
				}else{
					printf("Ponderacion del 0 al 1 (antes: '%.2f'):\n",l->Ponderacion);
					fflush(stdin);
					scanf("%f",&l->Ponderacion);
				}
				printf("|Datos modificados!|\n");
			}
			l = l->sgte;
		}
		if(encontrado == 0){
			printf("No se encontro al nodo\n");
		}
	}else{
		printf("La lista esta vacia\n");
	}
}

void preBorrar(Respuesta **l, int id, Respuesta *r, Pregunta *pl){
	Respuesta *aux = NULL;
	if(*l != NULL){
		aux = *l;
		if(aux->Respuesta_Id == id){
			//borrar y cargar nuevo si es pond 1
			if(aux->Ponderacion == 1){
				printf("El nodo a borrar tiene ponderacion 1, se creara otra respuesta a la misma pregunta con ponderacion 1\n");
				crearRespuesta(&(*l),pl,1,aux->Pregunta_Id);
			}
			borrarRespuesta(&(*l),id,*l);
		}else{
			aux = aux->sgte;
			while(aux != *l){
				if(aux->Respuesta_Id == id){
					//borrar y cargar nuevo si es pond 1
					if(aux->Ponderacion == 1){
						printf("El nodo a borrar tiene ponderacion 1, se creara otra respuesta a la misma pregunta con ponderacion 1\n");
						crearRespuesta(&(*l),pl,1,aux->Pregunta_Id);
					}
					borrarRespuesta(&(*l),id,*l);
					break;
				}
				aux = aux->sgte;
			}
		}
	}else{
		printf("La lista esta vacia\n");
	}
}

void borrarRespuesta(Respuesta **l, int id, Respuesta *r){
	Respuesta *bor, *ult;
	if(*l != NULL){
		if((*l)->Respuesta_Id == id){
			if(*l == r){
				ult = *l;
				while(ult->sgte != r){
					ult = ult->sgte;
				}
				ult->sgte = (*l)->sgte;
			}
			bor = *l;
			*l = (*l)->sgte;
			if(*l == bor){
				*l = NULL;
			}
			free(bor);
			printf("|se borro la respuesta|\n");
		}else{
			if((*l)->sgte == r){
				printf("Fin de la lista, no se encontro al nodo\n");
			}else{
				borrarRespuesta(&(*l)->sgte,id,r);
			}
		}
	}
}

void leerRespuestasCSV(const char* nombreArchivo, Respuesta **inicio) {
    FILE* archivo = fopen(nombreArchivo, "r");
    if (!archivo) {
        printf("No se pudo abrir el archivo: %s\n", nombreArchivo);
        return;
    }

    char linea[256];

    while (fgets(linea, sizeof(linea), archivo)) {
        Respuesta *nuevo = (Respuesta*) malloc(sizeof(Respuesta));
        if (!nuevo) {
            printf("Error al reservar memoria\n");
            fclose(archivo);
            return;
        }

        // Extracción de campos numéricos fijos
        char idStr[13] = {0}, preguntaStr[13] = {0}, nroStr[13] = {0};
        strncpy(idStr, linea, 12);
        strncpy(preguntaStr, linea + 12, 12);
        strncpy(nroStr, linea + 24, 12);

        nuevo->Respuesta_Id = atoll(idStr);
        nuevo->Pregunta_Id = atoll(preguntaStr);
        nuevo->Respuesta_Nro = atoll(nroStr);

        // Buscar última coma (que es la de la ponderación)
        char* coma = strrchr(linea, ',');
        if (!coma) {
            printf("Error: no se encontró coma decimal\n");
            free(nuevo);
            continue;
        }

        // Extraer parte flotante
        char ponderacionStr[10];
        strncpy(ponderacionStr, coma - 1, 6); // captura " 0,75" o " 1,00"
        ponderacionStr[6] = '\0';

        // Reemplazar coma por punto para atof
        for (int i = 0; ponderacionStr[i]; i++) {
            if (ponderacionStr[i] == ',') {
                ponderacionStr[i] = '.';
            }
        }

        nuevo->Ponderacion = atof(ponderacionStr);

        // Extraer cadena de texto entre campos fijos y coma
        int inicioTexto = 36; // 12+12+12
        int finTexto = coma - linea; // posición de la coma

        int longitudTexto = finTexto - inicioTexto;
        if (longitudTexto >= 50) longitudTexto = 49;

        strncpy(nuevo->Respuesta, linea + inicioTexto, longitudTexto);
		nuevo->Respuesta[longitudTexto] = '\0';

		// Eliminar espacios finales y dígitos sueltos tipo '0' o '1'
		for (int i = longitudTexto - 1; i >= 0; i--) {
 		   if (nuevo->Respuesta[i] == ' ' || (nuevo->Respuesta[i] >= '0' && nuevo->Respuesta[i] <= '9')) {
  		      nuevo->Respuesta[i] = '\0';
  		  } else {
  		      break;
 		   }
		}
        nuevo->sgte = NULL;

       insertarRespuesta(&(*inicio),nuevo,*inicio);
    }

    fclose(archivo);
}

//===================================|Encuestas|===================================

void apilar(Encuesta * node, Encuesta **head){

    node->sgte = *head;
    *head = node;
}

int pilavacia(Encuesta *head){
    if (head == NULL){
        return 1;
    }
    else 
        return 0;
}
Encuesta * desapilar(Encuesta **head)
{
    Encuesta * tmp = *head;
    if (pilavacia(*head) == 0)
    {
        *head = (*head)->sgte;
        tmp->sgte = NULL;
        return  tmp;
    }
}

void crearEncuesta(Encuesta ** head){	
char id[20];
char id2[20];
char bufferCleaner; 
FILE * EncuestaCSV = NULL;   
time_t currentTime = time(NULL);
struct tm *monthYear = localtime(&currentTime); 
Encuesta * newNode = (Encuesta*)malloc(sizeof(Encuesta));
if (newNode == NULL)
{
    printf("Error en la memoria");
    return;
}
unsigned __int32 rand;
rand_s(&rand);
long long randomNumber = (long long)rand;
sprintf(id, "%lld", randomNumber);
strncpy(id2, id, 6);
randomNumber = strtoll(id2, NULL,0 );

printf("Ingresar nombre de la encuesta\n");
fgets(newNode->Denominacion, sizeof(newNode->Denominacion), stdin);
newNode->Denominacion[strcspn(newNode->Denominacion, "\n")] = 0;
newNode->Encuesta_Anio = monthYear->tm_year + 1900;
newNode->Encuesta_Mes = monthYear->tm_mon + 1;
newNode->Procesada = 0;
newNode->sgte = NULL;
newNode->Encuesta_Id = randomNumber;
apilar(newNode, head);
printf("Nueva encuesta con el id %lld creada \n", newNode->Encuesta_Id);

fopen_s(&EncuestaCSV, "Encuesta.CSV", "a");
if (EncuestaCSV == NULL){
    printf("Error al abrir el csv\n");
    return;
}
fprintf(EncuestaCSV, "%lld,%s,%d,%d,%d\n", newNode->Encuesta_Id, newNode->Denominacion, newNode->Encuesta_Mes, newNode->Encuesta_Anio, newNode->Procesada);
fclose(EncuestaCSV);
}

void leerCSVencuestas(Encuesta **head) {
FILE * csv;
char linea [80];
char * token;
char * campoCsv[5];
fopen_s(&csv, "Encuesta.CSV", "r");
if (csv == NULL){
    printf("Error al abrir el csv\n");
    return;
}
while (fgets(linea, sizeof(linea), csv) != NULL)
{
    linea[strcspn(linea, "\n")] = 0;
    int i = 0;
     token = strtok(linea, ",");
      while (token != NULL && i < 5) {
            campoCsv[i] = token; 
            i++;
            token = strtok(NULL, ","); 
        }
    Encuesta * newNode = (Encuesta*)malloc(sizeof(Encuesta));
    newNode->Encuesta_Id = strtoll(campoCsv[0], NULL, 0);
    strcpy(newNode->Denominacion, campoCsv[1]);
    newNode->Encuesta_Mes = atoi(campoCsv[2]);
    newNode->Encuesta_Anio = atoi(campoCsv[3]);
    newNode->Procesada = atoi(campoCsv[4]);
    apilar(newNode, head);
}
fclose(csv);
}
void ListaDeEncuestas(Encuesta **head){
	if (pilavacia(*head) == 1)
	{
		return;
	}
	
	Encuesta * nodeTmp = NULL;
	nodeTmp = desapilar(head);
	ListaDeEncuestas(head);
	
	printf("Denominacion: %s \n id: %lld \n fecha: %d/%d \n Estado de procesamiento: %d\n", nodeTmp->Denominacion, nodeTmp->Encuesta_Id, nodeTmp->Encuesta_Mes, nodeTmp->Encuesta_Anio, nodeTmp->Procesada);
	apilar(nodeTmp, head);
}
void modificarEncuesta(Encuesta **head, long long id, FILE *listaModificada)
{
if (pilavacia(*head) == 1)
	{
		return;
	}
	if (id == 0)
	{
		char bufferCleaner; 
		char aux[60];
		printf("ingrese id de la encuesta \n");
		fgets(aux, sizeof(aux), stdin);
		aux[strcspn(aux, "\n")] = 0;
		id = strtoll(aux, NULL, 0);
	}
	Encuesta * nodeTmp = NULL;
	nodeTmp = desapilar(head);
	modificarEncuesta(head, id, listaModificada);
	
	if (id == nodeTmp->Encuesta_Id)
	{
		char bufferCleaner; 
		time_t currentTime = time(NULL);
		struct tm *monthYear = localtime(&currentTime);
		printf("Ingresar nombre de la encuesta\n");
		fgets(nodeTmp->Denominacion, sizeof(nodeTmp->Denominacion), stdin);
		nodeTmp->Denominacion[strcspn(nodeTmp->Denominacion, "\n")] = 0;
		nodeTmp->Encuesta_Anio = monthYear->tm_year + 1900;
		nodeTmp->Encuesta_Mes = monthYear->tm_mon + 1;
	}
	fprintf(listaModificada, "%lld,%s,%d,%d,%d\n", nodeTmp->Encuesta_Id, nodeTmp->Denominacion, nodeTmp->Encuesta_Mes, nodeTmp->Encuesta_Anio, nodeTmp->Procesada);
	apilar(nodeTmp, head);
}
void menuEncuestas(Encuesta **head, Pregunta **headPr, Respuesta **headRe)
{
if (pilavacia(*head) == 1)
	{
		return;
	}
	if (id == 0)
	{
		char bufferCleaner; 
		char aux[60];
		printf("ingrese id de la encuesta \n");
		fgets(aux, sizeof(aux), stdin);
		aux[strcspn(aux, "\n")] = 0;
		id = strtoll(aux, NULL, 0);
	}
	Encuesta * nodeTmp = NULL;
	nodeTmp = desapilar(head);
	borrarEncuesta(head, id, listaModificada);
	
	if (id == nodeTmp->Encuesta_Id)
	{
		free(nodeTmp);
		return;
	}
	fprintf(listaModificada, "%lld,%s,%d,%d,%d\n", nodeTmp->Encuesta_Id, nodeTmp->Denominacion, nodeTmp->Encuesta_Mes, nodeTmp->Encuesta_Anio, nodeTmp->Procesada);
	apilar(nodeTmp, head);
}
void borrarEncuesta(Encuesta **head, long long id, FILE *listaModificada, Pregunta **headPr, Respuesta **headRe)
{
	int i = 10;
	char auxiliar[50];
	FILE * listaModificada = NULL;

	while (i != 0) {
		
		printf("----- Menu de Encuestas ------- \n 1 - Nueva encuesta  \n 2 - Lista de encuestas  \n 3 - Modificar encuesta \n 4 - Borrar encuesta \n 0 - Salir \n Ingrese una opcion: "); 
		fgets(auxiliar, sizeof(auxiliar), stdin);
		i = atoi(auxiliar);
		printf("\n");
        switch (i) {
			case 1:
				printf("------Creando nueva encuesta------\n");
				crearEncuesta(head);
			break;

		    case 2:
		        printf("------Leyendo lista de encuestas------\n");
				ListaDeEncuestas(head);
		    break;
		    
		    case 3:
			printf("------Modificando encuesta------\n");   
			remove("Encuesta.CSV");
			fopen_s(&listaModificada, "Encuesta.CSV", "a");
			if (listaModificada == NULL){
				printf("Error al abrir el csv\n");
				return;
			}
			modificarEncuesta(head, 0, listaModificada);
			fclose(listaModificada);
				
			break;
			
		    case 4:
		        printf("------Borrar encuesta------\n");
				remove("Encuesta.CSV");
				fopen_s(&listaModificada, "Encuesta.CSV", "a");
				if (listaModificada == NULL){
				printf("Error al abrir el csv\n");
				return;
				}
				borrarEncuesta(head, 0, listaModificada);
				fclose(listaModificada);
		    break;
		    
		    case 0:
		        printf("------Volviendo al menu principal------\n");
		    break;
		    
		    default:
		        puts("Opcion invalida. Intente de nuevo.\n");
			break;
        }
    }
}
